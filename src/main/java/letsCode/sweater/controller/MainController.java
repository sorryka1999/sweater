package letsCode.sweater.controller;

import letsCode.sweater.domain.Message;
import letsCode.sweater.domain.User;
import letsCode.sweater.repos.MessageRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.util.UUID;

@Controller // This means that this class is a Controller
public class MainController {

    @Autowired  // This means to get the bean called MessageRepo
                // Which is auto-generated by Spring, we will use it to handle the data
    private MessageRepo messageRepo;

    // look at application.property
    @Value("${upload.path}")
    private String uploadPath;

    @GetMapping("/") // For GET request mapping
    public String greeting(Model model) {
        return "greeting"; // "greeting" is the name of html file which is sending to this request
    }

    @GetMapping("/main")
    // 'Model model' is used for binding data to the page
    public String main(
            @RequestParam(required = false, defaultValue = "") String filter,
            Model model) {
        // getting set of "messages" using 'Iterable'
        Iterable<Message> messages;
        if (filter != null && !filter.isEmpty()) {
            messages = messageRepo.findByTag(filter);
        } else {
            messages = messageRepo.findAll();
        }
        // Binding data to the page
        model.addAttribute("messages", messages);
        model.addAttribute("filter", filter);
        return "main";
    }

    @PostMapping("/main") // For POST request mapping
    public String add(
            // getting info about author
            @AuthenticationPrincipal User user,
            // This parameters were get from request by using @RequestParam annotation
            @RequestParam String text,
            @RequestParam String tag,
            @RequestParam("file") MultipartFile file,
            Model model)
            // exception added to catch exception by transferTo() method
            throws IOException {
        Message message = new Message(text, tag, user); // an object to save in db
        if (file != null && !file.getOriginalFilename().isEmpty()) {
            File uploadDir = new File(uploadPath);
            if (!uploadDir.exists()) {
                uploadDir.mkdir(); // make directory method
            }
            String uuidFile = UUID.randomUUID().toString(); // universe unique id
            String resultFilename = uuidFile + "." + file.getOriginalFilename();
            // loading file
            file.transferTo(new File("/" + uploadPath + "/" + resultFilename));
            message.setFilename(resultFilename);
        }
        messageRepo.save(message);
        Iterable<Message> messages = messageRepo.findAll();
        model.addAttribute("messages", messages);
        return "main";
    }

    @PostMapping("filter")
    public String filter(@RequestParam String filter, Model model) {
        Iterable<Message> messages;
        if (filter != null && !filter.isEmpty()) {
            messages = messageRepo.findByTag(filter);
        } else {
            messages = messageRepo.findAll();
        }
        model.addAttribute("messages", messages);
        return "main";
    }

}
